#!/usr/bin/env python
# encoding: utf-8
import keyring
import re
import os
import sys
import requests
import configobj
import getpass


class bcolors:
    HEADER = '\033[1m\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[1m\033[92m'
    FAIL = '\033[1m\033[91m'
    ENDC = '\033[0m'


class Puncher(object):
    APP_NAME = 'ttzentyal puncher'
    APP_NAME_TTZENTYAL = "Zentyal Time Tracker"
    BASE_URL = 'https://tt.zentyal.com'
    ROUTES = {'punch-in': '/timetracking/punch/punch_in',
              'punch-out': '/timetracking/punch/punch_out',
              'punch': '/timetracking/punch',
              'hq': '/timetracking/hq'}

    def __init__(self):
        self._get_username()
        self._get_password()

    def _get_username(self):
        conf_file_punch = config_file = os.path.join(os.environ['HOME'], '.ttpuncher')
        if not os.path.exists(config_file):
            config_file = os.path.join(os.environ['HOME'], '.ttzentyal')
        try:
            conf_obj = configobj.ConfigObj(config_file, encoding='UTF8')
            self.username = conf_obj["username"]
        except:
            print ("You need to create a %s file and define username key, something like:\n"
                   "username=jconnor" % conf_file_punch)
            sys.exit(1)

    def _get_password(self):
        self.password = keyring.get_password(self.APP_NAME, self.username)
        if not self.password:
            self.password = keyring.get_password(self.APP_NAME_TTZENTYAL, self.username)
        if not self.password:
            self.password = getpass.getpass(prompt=("Password for %s: " % self.username))
            keyring.set_password(self.APP_NAME, self.username, self.password)

    def punch_in(self):
        body = self._get('punch-in')
        if self.ROUTES['punch-out'] not in body:
            raise RuntimeError("Punch in failed")

        return self.working_time(body)

    def punch_out(self):
        body = self._get('punch-out')
        if self.ROUTES['punch-in'] not in body:
            raise RuntimeError("Punch out failed")

        return self.working_time(body)

    def people_working(self):
        body = self._get('hq')
        name_re = re.compile(r"<td>([^0-9]*)</td>")
        ret = []
        for line in body.split("\n"):
            name = name_re.search(line)
            if name:
                ret.append(name.group(1))
        return ret

    def working_time(self, body=None):
        """
        Return a tuple of (today, week) worked hours
        """
        if body is None:
            body = self._get('punch')

        day_re = re.compile(r"d.a[^0-9]*([0-9]+:[0-9]+)")
        week_re = re.compile(r"semana[^0-9]*([0-9]+:[0-9]+)")
        day = day_re.search(body)
        week = week_re.search(body)

        day = day.group(1) if day else '?'
        week = week.group(1) if week else '?'
        return (day, week)

    def is_punched_in(self):
        body = self._get('punch')
        return self.ROUTES['punch-out'] in body

    def _get(self, route):
        return requests.get(self.BASE_URL + self.ROUTES[route],
                            auth=(self.username, self.password)).text


def print_people_working(people_working):
    print bcolors.HEADER + "People working"
    print "==============" + bcolors.ENDC
    for person in p.people_working():
        print bcolors.OKBLUE + person
    print bcolors.ENDC

def print_working_time(working_time):
    print bcolors.OKBLUE + "Today hours: " + bcolors.OKGREEN + working_time[0] + bcolors.ENDC
    print bcolors.OKBLUE + "Week hours: " + working_time[1] + bcolors.ENDC
    print bcolors.ENDC


def usage():
    print "Use %s in|out|status" % sys.argv[0]


if __name__ == '__main__':
    p = Puncher()

    if len(sys.argv) != 2:
        usage()

    elif sys.argv[1] == 'in':
        try:
            working_time = p.punch_in()
            print bcolors.OKGREEN + "Punch in done!" + bcolors.ENDC
            print ''

            print_working_time(working_time)
            print_people_working(p.people_working())
        except:
            print bcolors.FAIL + "I couldn't punch in :-/" + bcolors.ENDC

    elif sys.argv[1] == 'out':
        try:
            working_time = p.punch_out()
            print bcolors.OKGREEN + "Punch out done!" + bcolors.ENDC
            print ''

            print_working_time(working_time)
            print_people_working(p.people_working())
        except:
            print bcolors.FAIL + "I couldn't punch out :-/" + bcolors.ENDC

    elif sys.argv[1] == 'status':
        working_time = p.working_time()
        people_working = p.people_working()
        print ''
        if p.is_punched_in():
            print bcolors.OKGREEN + "Punched [IN]" + bcolors.ENDC
        else:
            print bcolors.FAIL + "Punched [OUT]" + bcolors.ENDC
        print ''
        print_working_time(working_time)

        # print what other are doing
        print_people_working(people_working)

    else:
        usage()
